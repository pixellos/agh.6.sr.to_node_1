/* tslint:disable */
/* eslint-disable */
/**
 * order-microservice
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Order,
    OrderFromJSON,
    OrderFromJSONTyped,
    OrderToJSON,
    OrderDtoAllOf,
    OrderDtoAllOfFromJSON,
    OrderDtoAllOfFromJSONTyped,
    OrderDtoAllOfToJSON,
    OrderProduct,
    OrderProductFromJSON,
    OrderProductFromJSONTyped,
    OrderProductToJSON,
} from './';

/**
 * 
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
    /**
     * 
     * @type {Array<OrderProduct>}
     * @memberof OrderDto
     */
    products: Array<OrderProduct>;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    quantity: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    status: OrderDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    id?: string;
}

export function OrderDtoFromJSON(json: any): OrderDto {
    return OrderDtoFromJSONTyped(json, false);
}

export function OrderDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'products': ((json['products'] as Array<any>).map(OrderProductFromJSON)),
        'name': json['name'],
        'quantity': json['quantity'],
        'status': json['status'],
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function OrderDtoToJSON(value?: OrderDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'products': ((value.products as Array<any>).map(OrderProductToJSON)),
        'name': value.name,
        'quantity': value.quantity,
        'status': value.status,
        'id': value.id,
    };
}

/**
* @export
* @enum {string}
*/
export enum OrderDtoStatusEnum {
    Started = 'Started',
    Sent = 'Sent',
    Derived = 'Derived',
    Returned = 'Returned'
}


