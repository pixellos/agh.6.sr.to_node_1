/* tslint:disable */
/* eslint-disable */
/**
 * product-microservice
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponseEmpty,
    ErrorResponseEmptyFromJSON,
    ErrorResponseEmptyToJSON,
    ErrorResponseProduct,
    ErrorResponseProductFromJSON,
    ErrorResponseProductToJSON,
    ErrorResponseProductDtoArray,
    ErrorResponseProductDtoArrayFromJSON,
    ErrorResponseProductDtoArrayToJSON,
    ErrorResponseProductEventUnionArray,
    ErrorResponseProductEventUnionArrayFromJSON,
    ErrorResponseProductEventUnionArrayToJSON,
    ErrorResponseString,
    ErrorResponseStringFromJSON,
    ErrorResponseStringToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    ProductsViewModel,
    ProductsViewModelFromJSON,
    ProductsViewModelToJSON,
} from '../models';

export interface AddRequest {
    id: string;
    quantity: number;
}

export interface BuyRequest {
    inlineObject: Array<InlineObject>;
}

export interface CreateRequest {
    productsViewModel: ProductsViewModel;
}

export interface GetByIdRequest {
    id: string;
}

export interface ListRequest {
    id: string;
    type: ListTypeEnum;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async addRaw(requestParameters: AddRequest): Promise<runtime.ApiResponse<ErrorResponseEmpty>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling add.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling add.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/product/{id}/add`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseEmptyFromJSON(jsonValue));
    }

    /**
     */
    async add(requestParameters: AddRequest): Promise<ErrorResponseEmpty> {
        const response = await this.addRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async buyRaw(requestParameters: BuyRequest): Promise<runtime.ApiResponse<ErrorResponseString>> {
        if (requestParameters.inlineObject === null || requestParameters.inlineObject === undefined) {
            throw new runtime.RequiredError('inlineObject','Required parameter requestParameters.inlineObject was null or undefined when calling buy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product/buy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.inlineObject.map(InlineObjectToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseStringFromJSON(jsonValue));
    }

    /**
     */
    async buy(requestParameters: BuyRequest): Promise<ErrorResponseString> {
        const response = await this.buyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createRaw(requestParameters: CreateRequest): Promise<runtime.ApiResponse<ErrorResponseEmpty>> {
        if (requestParameters.productsViewModel === null || requestParameters.productsViewModel === undefined) {
            throw new runtime.RequiredError('productsViewModel','Required parameter requestParameters.productsViewModel was null or undefined when calling create.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductsViewModelToJSON(requestParameters.productsViewModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseEmptyFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CreateRequest): Promise<ErrorResponseEmpty> {
        const response = await this.createRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getByIdRaw(requestParameters: GetByIdRequest): Promise<runtime.ApiResponse<ErrorResponseProduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/product/{id}/get`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseProductFromJSON(jsonValue));
    }

    /**
     */
    async getById(requestParameters: GetByIdRequest): Promise<ErrorResponseProduct> {
        const response = await this.getByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listRaw(requestParameters: ListRequest): Promise<runtime.ApiResponse<ErrorResponseProductEventUnionArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling list.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling list.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/list/{type}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseProductEventUnionArrayFromJSON(jsonValue));
    }

    /**
     */
    async list(requestParameters: ListRequest): Promise<ErrorResponseProductEventUnionArray> {
        const response = await this.listRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listAllRaw(): Promise<runtime.ApiResponse<ErrorResponseProductDtoArray>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/product/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseProductDtoArrayFromJSON(jsonValue));
    }

    /**
     */
    async listAll(): Promise<ErrorResponseProductDtoArray> {
        const response = await this.listAllRaw();
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListTypeEnum {
    Product = 'Product'
}
